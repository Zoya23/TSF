# Code Generated by Sidekick is for learning and experimentation purposes only.
# File Path
path3 = 'microbial_growth_curve.csv'

# Importing relevant libraries
import numpy as np
import pandas as pd
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Creating the DataFrame
microbes_growth = pd.read_csv(path3)
microbes_growth.head()

# Identify x and y axis
x_data = microbes_growth['t [h]']
y_data = microbes_growth['microbes(g)']

# Convert dates to a numerical format for fitting (e.g., days since start).
microbes_growth['Time'] = (microbes_growth['t [h]'] - microbes_growth['t [h]'].min())
x_neumerical = microbes_growth['Time']

# Plot the time series to visualize the data
plt.figure(figsize=(12, 6))
plt.plot(x_data, y_data, label='Microbes growth')
plt.title('Microbes Growth Rate')
plt.xlabel('time')
plt.ylabel('Growth(g)')
plt.legend()
plt.show()

# Define the model for the Logistic curve
def logistic_curve(t, k, r, t0):
    return k / (1 + np.exp(- r * (t - t0)))

# Predicting initial guess values of Constants
k_guess = y_data[0]
if len(x_data) % 2 == 0:
    central_index = len(x_data) // 2 - 1
    centre_value_of_x = x_data[central_index]
else:
    central_index = len(x_data) // 2
    centre_value_of_x = x_data[central_index]
timestamp_obj = pd.Timestamp(centre_value_of_x)
t0_guess = timestamp_obj.year
r_guess = 1/t0

# Fit the model to the data
p0 = (k_guess, r_guess, t0_guess)
popt, pcov = curve_fit(logistic_curve, x_neumerical, y_data, p0=p0, maxfev=10000)

# Use the optimized parameters to plot the fitted curve
y_pred = logistic_curve(x_neumerical, *popt)

# Plotting the original data and the fitted curve
plt.figure(figsize=(12, 6))
plt.plot(x_data, y_data, label='Original Data')
plt.plot(x_data, y_pred, '--', label='Fitted Curve')
plt.title('Microbes Growth Curve and Fitted Logistic Curve')
plt.xlabel('time (in hours)')
plt.ylabel('Growth (g)')
plt.legend()
plt.show()

# Calculate R^2
r_squared = r2_score(y_data, y_pred)
print("Coefficient of Determination =", r_squared)
