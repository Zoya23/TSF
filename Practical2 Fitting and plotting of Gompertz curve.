PRACTICAL-02 Fitting and Plotting of Gompertz Curve
AIM: Fitting and plotting of Gompertz curve.

Problem Statement:
  Curve Fitting Objective: Develop a model to fit a Gompertz curve to a given dataset to understand growth phenomena and predict future trends accurately.
  Plotting Requirement: Visualize the fitted Gompertz curve alongside the original data to assess the model's performance and the fit quality.

Theory:
  Gompertz Function: The Gompertz curve is defined as 
y = a e-b e-ct
where a, b, and c are parameters. This function is commonly used to model sigmoidal growth processes in biology, demography, and marketing.
  Curve Fitting: Fitting a Gompertz curve involves estimating parameters a, b, and c using non-linear regression techniques to minimize the difference between observed and predicted values. The curve starts with a slow growth rate, increases rapidly, and then slows down again as it approaches an upper asymptote.
  Visualization: Plotting the Gompertz curve against the actual data helps in visually assessing how well the model captures the growth pattern. This visualization is critical for validating the model and for making accurate predictions based on the fitted curve.

Code:
You can get the data- https://www.math.ttu.edu/~atrindad/tsdata/FTSdatasets/taq-cat-t-jan042010.txt

path2 = "C:\\Users\\Desktop\\DataScience\\Sem 2\\Time_Series_Analysis\\Practical\\taq-cat-t-jan042010.txt"

# importing relavant libraries
import numpy as np
import pandas as pd
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Creating the DataFrame
stock_price = pd.read_csv(path2, sep='\s+')


# Manually combine the date and time columns into a single datetime column
# Adjust column names as per your file's header. For example, if the columns are named 'date', 'hour', 'minute', 'second'
stock_price['Datetime'] = pd.to_datetime(stock_price['date'].astype(str) + ' ' + stock_price['hour'].astype(str) + ':' +
                                stock_price['minute'].astype(str) + ':' + stock_price['second'].astype(str))

# Drop the original date, hour, minute, second columns as they are no longer needed
stock_price.drop(['date', 'hour', 'minute', 'second'], axis=1, inplace=True)

# Ensure DATE is converted to a datetime type and sorted
stock_price['Datetime'] = pd.to_datetime(stock_price['Datetime'])
stock_price.sort_values('Datetime', inplace=True)

# Identifying data of x and y axis
x_data = stock_price['Datetime']
y_data = stock_price['price']

# Set 'Datetime' as the DataFrame's index
stock_price.set_index('Datetime', inplace=True)
# Convert the datetime index to a numeric format for fitting
# Here, we'll use the number of seconds since the start, but you can adjust the unit as needed
x_neumerical = (stock_price.index - stock_price.index.min()).total_seconds()
# Plot the time series to visualize the data
plt.figure(figsize=(12, 6))
plt.plot(x_data, y_data, label='Stock Price')
plt.title('Stock Price Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.show()

# Define the model for the Gompertz curve
def gompertz_curve(t, a, b, c):
    return a * np.exp(b * np.exp (-c * t))
# Predicting initial guess values of Constants

# Initial guess for 'a'
a_guess = y_data[0]

# Calculate the middle index and the corresponding guess for 'b'
if len(x_data) % 2 == 0:  # If even number of elements
    central_index = len(x_data) // 2 - 1  # Use the lower middle index
    centre_value_of_x = x_data[central_index]
else:  # If odd number of elements
    central_index = len(x_data) // 2
    centre_value_of_x = x_data[central_index]

# Since the value of x is Pandas.TimeStamp, extracting year for predicting value of b
    
timestamp_obj = pd.Timestamp(centre_value_of_x)
c_guess = 1/ timestamp_obj.year
  
    
# Initial guess for 'c'
b_guess = np.exp(c_guess * timestamp_obj.year)

print(f"Initial Guess values of constants a, b, and c are {a_guess:.2f}, {b_guess:.2f}, {c_guess:.4f} respectively.")
Initial Guess values of constants a, b, and c are 57.65, 2.72, 0.0005 respectively.
# Fit the model to the data
p0 = (a_guess, b_guess, c_guess)
popt, pcov = curve_fit(gompertz_curve, x_neumerical, y_data, p0=p0, maxfev = 8000)


# Identifying optimal values of parameters
print(f"Optimized values of constants a, b, and c for best fit are", popt,  "respectively.")
print("**************************************************************************************")


# Identify covariance matrix for estimating "error" of the paramters a,b and c

print("Covariance matrix of the parameters a, b and c is:\n", pcov)
print("**************************************************************************************")

sns.heatmap(pcov, cmap='coolwarm', annot=True)
Optimized values of constants a, b, and c for best fit are [ 5.87828497e+01 -2.16284102e-02  5.41037386e-04] respectively.
**************************************************************************************
Covariance matrix of the parameters a, b and c is:
 [[ 1.15415620e-06 -4.11196221e-09 -1.74510517e-09]
 [-4.11196221e-09  6.34848601e-09 -1.76786095e-10]
 [-1.74510517e-09 -1.76786095e-10  1.28238587e-11]]
**************************************************************************************
<AxesSubplot:>

# Use the optimized parameters to plot the fitted curve
y_pred = gompertz_curve(x_neumerical, *popt)
# Plotting the original data and the fitted curve
plt.figure(figsize=(12, 6))
plt.plot(x_data, y_data, label='Original Data')
plt.plot(x_data, y_pred, '--', label='Fitted Curve')
plt.title('Stock Price and Fitted Gompertz Curve')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Calculate R^2
r_squared = r2_score(y_data, y_pred)
print("Coefficient of Determination = " ,r_squared)
Coefficient of Determination =  0.7621206359222121
Interpretation:
This covariance matrix is a critical statistical tool in understanding the uncertainty in the estimated parameters of the model fit.
The diagonal elements of the covariance matrix provide the variances of the individual parameter estimates. The square root of these diagonal values gives the standard deviation of each parameter estimate. This standard deviation is an indicator of the uncertainty of the parameter estimates; smaller values generally suggest more precise estimates. In present case, the parameters a, b and c has low variance. This means the model's estimation of this parameter is more precise and reliable, suggesting that the true parameter value is likely to be close to the estimated value.
The off-diagonal elements of the covariance matrix represent the covariances between different parameter estimates. These values tell us how much the parameter estimates co-vary. A positive value indicates that as one parameter increases, the other tends to increase too. Conversely, a negative value suggests that as one parameter increases, the other tends to decrease.In present case, parameter a, b and c have a weak negative covariance with each other.
