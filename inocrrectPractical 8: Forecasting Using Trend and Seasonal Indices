# Code Generated by Sidekick is for learning and experimentation purposes only.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Load your dataset
path = r"C:\Users\Desktop\DataScience\Sem 2\Time_Series_Analysis\Practical\Symphony-Data.csv"
df = pd.read_csv(path)
df = df.drop(['OPEN', 'HIGH', 'LOW', 'VOLUME', 'CHANGE(%)'], axis=1)
df['DATE'] = pd.to_datetime(df['DATE'], format='%d-%b-%y')
df = df.sort_values(by='DATE', ascending=True)

# Extract Month and Year
df['Year'] = df['DATE'].dt.year
df['Month'] = df['DATE'].dt.month

# Calculate monthly mean prices for each year
monthly_mean = df.groupby(['Month', 'Year'])['PRICE'].mean().unstack()

# Prepare data for regression (trend)
monthly_mean_flat = monthly_mean.stack().reset_index()
monthly_mean_flat['Time_Index'] = np.arange(1, len(monthly_mean_flat) + 1)
X = monthly_mean_flat[['Time_Index']]
y = monthly_mean_flat['PRICE']

# Fit linear regression model for trend
model = LinearRegression()
model.fit(X, y)
monthly_mean_flat['Trend'] = model.predict(X)

# Calculate seasonal indices (using ratio-to-trend method)
monthly_mean_flat['Ratio'] = (monthly_mean_flat['PRICE'] / monthly_mean_flat['Trend']) * 100
seasonal_indices = monthly_mean_flat.groupby('Month')['Ratio'].mean()
normalized_indices = seasonal_indices / seasonal_indices.mean() * 100

# Forecast for next 12 months
future_time_index = np.arange(len(monthly_mean_flat) + 1, len(monthly_mean_flat) + 13).reshape(-1, 1)
future_trend = model.predict(future_time_index)
future_months = np.arange(1, 13)
future_seasonal = normalized_indices.values

forecast = (future_trend * future_seasonal) / 100

# Plotting
plt.plot(monthly_mean_flat['Time_Index'], monthly_mean_flat['PRICE'], label='Actual')
plt.plot(monthly_mean_flat['Time_Index'], monthly_mean_flat['Trend'], label='Trend')
plt.plot(np.arange(len(monthly_mean_flat) + 1, len(monthly_mean_flat) + 13), forecast, label='Forecast', marker='o')
plt.xlabel('Time Index')
plt.ylabel('Price')
plt.title('Forecasting Using Trend and Seasonal Indices')
plt.legend()
plt.show()
