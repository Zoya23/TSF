AIM: Measurement of Seasonal indices Ratio-to-Moving Average method. 
Problem Statement: 
∙ Seasonal Pattern Identification: Use the Ratio-to-Moving Average method tomeasure seasonal indices, identifying recurring patterns or cycles in the data. ∙ Trend and Seasonality Separation: Isolate the underlying trend fromseasonal variations to enhance understanding and forecasting of time series data. 
Theory: 
∙ Ratio-to-Moving Average Method: This method involves smoothing the datausing a moving average to identify the trend component. The actual data values arethen divided by the corresponding moving average values to isolate the seasonal component. 
∙ Seasonal Indices Calculation: The seasonal indices are calculated by averagingthe ratio-to-moving average values for each period (e.g., month or quarter) across multiple cycles. These averages are then normalized to ensure that the sumof theindices equals the number of periods. 
∙ Visualization: Plotting the seasonal indices alongside the trend-adjusted data helps in visualizing the periodicity and magnitude of seasonal effects. This visualizationis crucial for understanding and forecasting time series data, allowing for adjustments that account for regular seasonal fluctuations. 



Code: 
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
# Load your dataset 
path = r"C:\Users\Desktop\DataScience\Sem 2\Time_Series_Analysis\Practical\Symphony-Data.csv" 
df = pd.read_csv(path) 
# Droping unnecessary rows 
df = df.drop(['OPEN', 'HIGH', 'LOW', 'VOLUME', 'CHANGE(%)'], axis=1)
# Converting Date in datetime object 
df['DATE'] = pd.to_datetime(df['DATE'], format = "%d-%b-%y")
# Arranging Data in ascending order by Date df = df.sort_values(by = 'DATE', ascending=True) # Extracting Month and Year Info form Date 
df['Year'] = df['DATE'].dt.year 
df['Month'] = df['DATE'].dt.month 
# Calculate the monthly mean prices for each year 
df = df.groupby(['Month', 'Year'])['PRICE'].mean().unstack() # unstack command will help to create povit table 
# Step 1: Calculate Monthly Averages 
df['Monthly Average'] = df[[2019, 2020, 2021, 2022, 2023, 2024]].mean(axis=1) 
# Step 2: Compute Centered Moving Averages df['Centered Moving Average'] = df['Monthly Average'].rolling(window=2, center=True).mean() 
# Step 3: Calculate the Ratio of Actual to Moving Average df['Ratio'] = df['Monthly Average'] / df['Centered Moving Average']
# Step 4: Estimate Seasonal Indexes 
# Normalize the ratios so they sum to the number of months sum_ratios = df['Ratio'].sum() 
df['Seasonal Index'] = df['Ratio'] * (len(df) / sum_ratios) 
# Step 5: Deseasonalize the data 
df['Deseasonalized_2019'] = df[2019] / df['Seasonal Index'] df['Deseasonalized_2020'] = df[2020] / df['Seasonal Index'] df['Deseasonalized_2021'] = df[2021] / df['Seasonal Index'] df['Deseasonalized_2022'] = df[2022] / df['Seasonal Index'] df['Deseasonalized_2023'] = df[2023] / df['Seasonal Index'] df['Deseasonalized_2024'] = df[2024] / df['Seasonal Index'] 
plt.figure(figsize=(14, 8)) 
# Plot original data 
plt.subplot(3, 1, 1) 
plt.plot(df.index, df[2019], label='2019', marker='o') plt.plot(df.index, df[2020], label='2020', marker='o') plt.plot(df.index, df[2021], label='2021', marker='o') plt.plot(df.index, df[2022], label='2022', marker='o') plt.plot(df.index, df[2023], label='2023', marker='o') plt.plot(df.index, df[2024], label='2024', marker='o') plt.title('Original Sales Data') 
plt.xlabel('Month') 
plt.ylabel('Stock Price(Rs.)') 
plt.legend(loc='upper right')
# Plot seasonal indices 
plt.subplot(3, 1, 2) 
plt.plot(df.index, df['Seasonal Index'], label='Seasonal Index', marker='o', color='orange') 
plt.title('Seasonal Indices') 
plt.xlabel('Month') 
plt.ylabel('Index') 
plt.legend(loc='upper right') 
# Plot deseasonalized data 
plt.subplot(3, 1, 3) 
plt.plot(df.index, df['Deseasonalized_2019'], label='2019- Deseasonalized', marker='o') 
plt.plot(df.index, df['Deseasonalized_2020'], label='2020- Deseasonalized', marker='o') 
plt.plot(df.index, df['Deseasonalized_2021'], label='2021- Deseasonalized', marker='o') 
plt.plot(df.index, df['Deseasonalized_2022'], label='2022- Deseasonalized', marker='o') 
plt.plot(df.index, df['Deseasonalized_2023'], label='2023- Deseasonalized', marker='o') 
plt.plot(df.index, df['Deseasonalized_2024'], label='2024- Deseasonalized', marker='o') 
plt.title('Deseasonalized Data') 
plt.xlabel('Month') 
plt.ylabel('Deseasonalized Sales') 
plt.legend(loc='upper right') 
plt.tight_layout() 
plt.show()
